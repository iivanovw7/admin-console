{
	"info": {
		"_postman_id": "e65b96ca-c765-4fcd-9f59-ef25c4e7ef07",
		"name": "admin-console-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "AUTH LOGIN Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ae56a232-2007-4f90-9b34-0573b35f5317",
						"exec": [
							"// Checking login with correct fields",
							"pm.test(\"LOGIN SUCCESS (status code is 200)\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// milliseconds",
							"tests[`Response time is acceptable: < ${pm.environment.get('responceTime_AUTH')} ms`] = responseTime < pm.environment.get('responceTime_AUTH'); ",
							"",
							"// Checking whether the Content-type header is present.",
							"tests[\"content-type header is present\"] = postman.getResponseHeader(\"content-type\");",
							"",
							"//repeats request with wrong password, checks response header",
							"pm.test(\"WRONG PASSWORD (status code is 403)\", function () {",
							"    ",
							"    pm.sendRequest({",
							"        url: 'http://localhost:7425/api/auth/login',",
							"        method: 'POST',",
							"         header: {",
							"            'Content-Type': 'application/x-www-form-urlencoded'",
							"        },",
							"        body: {",
							"          mode: 'urlencoded',",
							"          urlencoded: [",
							"                {key: \"email\", value: pm.environment.get('admin_email'), disabled: false},",
							"                {key: \"password\", value: 'test', disabled: false}",
							"            ]",
							"        }",
							"    }, function(err, res) {",
							"        ",
							"        if (err) {",
							"            //console.log(err)",
							"        } else {",
							"            //console.log(res) ",
							"            pm.expect(res).to.have.property('code', 403);",
							"        }",
							"    })",
							"    ",
							"});",
							"",
							"//repeats request with wrong email, checks response header",
							"pm.test(\"WRONG EMAIL (status code is 403)\", function () {",
							"    ",
							"    pm.sendRequest({",
							"        url: 'http://localhost:7425/api/auth/login',",
							"        method: 'POST',",
							"         header: {",
							"            'Content-Type': 'application/x-www-form-urlencoded'",
							"        },",
							"        body: {",
							"          mode: 'urlencoded',",
							"          urlencoded: [",
							"                {key: \"email\", value: 'email@test.com', disabled: false},",
							"                {key: \"password\", value: pm.environment.get('admin_default_password'), disabled: false}",
							"            ]",
							"        }",
							"    }, function(err, res) {",
							"        ",
							"        if (err) {",
							"            //console.log(err)",
							"        } else {",
							"            //console.log(res) ",
							"            pm.expect(res).to.have.property('code', 403);",
							"        }",
							"    })",
							"    ",
							"});",
							"",
							"//Run login with wrong formatted email to test validator",
							"pm.test(\"WRONG FORMATTED EMAIL (status code 400, response title: Error, message: must be a valid email)\", function () {",
							"    ",
							"    pm.sendRequest({",
							"        url: 'http://localhost:7425/api/auth/login',",
							"        method: 'POST',",
							"         header: {",
							"            'Content-Type': 'application/x-www-form-urlencoded'",
							"        },",
							"        body: {",
							"          mode: 'urlencoded',",
							"          urlencoded: [",
							"                {key: \"email\", value: 'emtest.com', disabled: false},",
							"                {key: \"password\", value: pm.environment.get('admin_default_password'), disabled: false}",
							"            ]",
							"        }",
							"    }, function(err, res) {",
							"        ",
							"        if (err) {",
							"            console.log(err)",
							"        } else {",
							"            console.log(res) ",
							"            pm.expect(res).to.have.property('code', 400);",
							"            pm.expect((res).text()).to.include(\"Error\");",
							"            pm.expect((res).text()).to.include(\"must be a valid email\");",
							"        }",
							"    })",
							"})",
							"",
							"//Run login with blank email to test validator",
							"pm.test(\"BLANK EMAIL (status code 400, response title: Error, message: email is not allowed to be empty)\", function () {",
							"    ",
							"    pm.sendRequest({",
							"        url: 'http://localhost:7425/api/auth/login',",
							"        method: 'POST',",
							"         header: {",
							"            'Content-Type': 'application/x-www-form-urlencoded'",
							"        },",
							"        body: {",
							"          mode: 'urlencoded',",
							"          urlencoded: [",
							"                {key: \"email\", value: '', disabled: false},",
							"                {key: \"password\", value: pm.environment.get('admin_default_password'), disabled: false}",
							"            ]",
							"        }",
							"    }, function(err, res) {",
							"        ",
							"        if (err) {",
							"            console.log(err)",
							"        } else {",
							"            console.log(res) ",
							"            pm.expect(res).to.have.property('code', 400);",
							"            pm.expect((res).text()).to.include(\"Error\");",
							"            pm.expect((res).text()).to.include(\"email\");",
							"            pm.expect((res).text()).to.include(\"is not allowed to be empty\");",
							"        }",
							"    })",
							"})",
							"",
							"//Run login with blank password to test validator",
							"pm.test(\"BLANK PASSWORD (status code 400, response title: Error, message: password is not allowed to be empty)\", function () {",
							"    ",
							"    pm.sendRequest({",
							"        url: 'http://localhost:7425/api/auth/login',",
							"        method: 'POST',",
							"         header: {",
							"            'Content-Type': 'application/x-www-form-urlencoded'",
							"        },",
							"        body: {",
							"          mode: 'urlencoded',",
							"          urlencoded: [",
							"                {key: \"email\", value: pm.environment.get('admin_email'), disabled: false},",
							"                {key: \"password\", value: '', disabled: false}",
							"            ]",
							"        }",
							"    }, function(err, res) {",
							"        ",
							"        if (err) {",
							"            console.log(err)",
							"        } else {",
							"            console.log(res) ",
							"            pm.expect(res).to.have.property('code', 400);",
							"            pm.expect((res).text()).to.include(\"Error\");",
							"            pm.expect((res).text()).to.include(\"password\");",
							"            pm.expect((res).text()).to.include(\"is not allowed to be empty\");",
							"        }",
							"    })",
							"})",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "{{admin_email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{admin_default_password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:7425/api/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7425",
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "USERS Get random pages",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dcb266f8-8cac-460d-8e3b-b92c533330d7",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var body = JSON.parse(responseBody);",
							"    tests[\"Objects count: \"  + body.length] = true;",
							"});",
							"",
							"pm.test('User schema is valid', function() {",
							"    schema = {",
							"        \"status\":   {\"type\": \"boolean\"},",
							"        \"_id\":      {\"type\": \"string\" },",
							"        \"name\":     {\"type\": \"string\" },",
							"        \"surname\":  {\"type\": \"string\" },",
							"        \"email\":    {\"type\": \"string\" },",
							"        \"created\":  {\"type\": \"date\"   }    ",
							"    };",
							"    ",
							"    pm.expect(tv4.validate(schema, pm.response.json())).to.be.true;",
							"})",
							"",
							"//function calculates random number",
							"function getRandomInt(max) {",
							"    return Math.floor(Math.random() * Math.floor(max));",
							"}",
							"",
							"",
							"//set random limit of users per page",
							"var limit = getRandomInt(100)",
							"",
							"//set first page to call ",
							"var page = 1",
							"",
							"//calls sigle page of users with parameters",
							"var getSinglePage = function(page, limit, comment) {",
							"    return (",
							"        pm.sendRequest({",
							"            url: 'http://localhost:7425/api/users',",
							"            method: 'GET',",
							"            header: [`page:${page}`, `limit:${limit}`, `user:${pm.environment.get('adminID')}`] ",
							"        }, function(err, res) {",
							"            if (err) {",
							"                console.log(err)",
							"            } else {",
							"                console.log(comment)",
							"                console.log(res.json())  ",
							"                var rndLimit = getRandomInt(res.json().pages)",
							"                ",
							"                pm.test(`Get RANDOM (${rndLimit}) page of users, with RANDOM (${limit}) limit`, function() {",
							"                    pm.response.to.have.status(200);",
							"                    pm.sendRequest({",
							"                        url: 'http://localhost:7425/api/users',",
							"                        method: 'GET',",
							"                        header: [`page:${rndLimit}`, `limit:${limit}`, `user:${pm.environment.get('adminID')}`] ",
							"                    }, function(err, res) {",
							"                        if (err) {",
							"                            console.log(err)",
							"                        } else {",
							"                            console.log(`Get RANDOM (${rndLimit}) page of users, with RANDOM (${limit}) limit`)",
							"                            console.log(res.json())  ",
							"                        }",
							"                    })",
							"           ",
							"                })",
							"            }",
							"        ",
							"        })",
							"    )",
							"}",
							"",
							"pm.test(`Get FIRST page of users, with RANDOM limit (${limit})`, function() {",
							"    pm.response.to.have.status(200);",
							"    getSinglePage(1, limit, `Get FIRST page of users, with RANDOM (${limit}) limit`, getSinglePage);",
							"})",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "user",
						"value": "{{AdminRoleID}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:7425/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7425",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "USERS Get pages tests",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c66d583a-bc76-488a-acde-9002bef2290b",
						"exec": [
							"var pages = pm.environment.get('pages');",
							"var limits = pm.environment.get('limits');",
							"",
							"if (!pages || pages.length === 0) {",
							"    console.log('setting new pages and limits')",
							"    pages = [1, 2, 4, 13, 17, 45, 2, 44, 41, 32, 23, 12, 18, 100, 124];",
							"    limits = [12, 15, 24, 24, 45, 78, 12, 32, 12, 19, 4, 33, 12, 44, 82];",
							"}",
							"",
							"var currentPage = pages.shift();",
							"var currentLimit = limits.shift();",
							"",
							"pm.environment.set('currentPage', currentPage);",
							"pm.environment.set('currentLimit', currentLimit);",
							"",
							"pm.environment.set('pages', pages);",
							"pm.environment.set('limits', limits);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "625afa2f-d814-4084-9132-f895ece3767e",
						"exec": [
							"var pages = pm.environment.get('pages');",
							"",
							"console.log(pages)",
							"",
							"pm.test(\"status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Checking whether the Content-type header is present.",
							"tests[\"content-type header is present\"] = postman.getResponseHeader(\"content-type\");",
							"",
							"if (pages && pages.length > 0) {",
							"    console.log('Call next request')",
							"    postman.setNextRequest('USERS Tests');",
							"} else {",
							"    console.log('Stop requests')",
							"    postman.setNextRequest(null);",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "user",
						"type": "text",
						"value": "{{adminID}}"
					},
					{
						"key": "page",
						"value": "{{currentPage}}",
						"type": "text"
					},
					{
						"key": "limit",
						"value": "{{currentLimit}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:7425/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7425",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "USERS Get user by and modify",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": ""
				}
			},
			"response": []
		}
	]
}